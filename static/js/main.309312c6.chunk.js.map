{"version":3,"sources":["styling/App.ts","store/app-store.tsx","actions/darkmode.ts","store/objects/design-property.ts","store/storage.tsx","store/properties-store.tsx","store/objects/json.ts","context/index.tsx","hooks/use-stores.tsx","components/Item/style.tsx","components/DropdownProps/_dropdownTable.tsx","util/validationRules.tsx","components/DropdownProps/style.tsx","components/DropdownProps/index.tsx","components/ToggleProps/style.tsx","components/ToggleProps/index.tsx","components/ConfirmDialogs/index.tsx","components/EditComponent/index.tsx","components/Property/style.tsx","components/EditPropertyDialog/style.tsx","components/EditPropertyDialog/index.tsx","components/Property/index.tsx","components/Item/index.tsx","components/EditElementDialog/style.tsx","components/EditElementDialog/index.tsx","components/PropertyList/index.tsx","components/TopBar/style.tsx","components/TopBar/index.tsx","components/OpeningDialog/style.tsx","components/OpeningDialog/index.tsx","components/ClassesBox/style.tsx","components/ClassesBox/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","height","overflow","mainColumn","alignItems","spacing","marginTop","leftColumn","maxWidth","overflowX","overflowY","position","addButton","bottom","right","rightColumn","jsonBox","padding","classesBox","paddingLeft","AppStore","mode","this","darkMode","localStorage","setItem","observable","getItem","action","AbstractDesignProperty","name","description","oldNames","id","uuidv4","names","ret","type","length","computed","ToggleDesignProperty","className","ignored","jsAbstract","class","DropdownDesignPropertyProperty","DropdownDesignProperty","options","map","opt","opts","push","filtered","filter","from","to","listCopy","splice","jsObject","STORAGE_KEY","autoStore","store","firstRun","autorun","existing","storage","get","setHasLocalStorage","populateFromJSON","JSON","stringify","set","JSOBject","PropertiesStore","json","state","hasLocalStorage","oldName","newName","properties","has","props","pos","mapsPositions","delete","key","propList","sourceKey","targetKey","sourceCopy","targetCopy","sourceObject","prop","currentList","maxPos","locationsArray","reduce","max","cur","Math","idMap","jsonStr","newMap","Map","newMapPositions","JSONObject","parse","designProperties","Error","Object","keys","forEach","i","objectArray","designProperty","newProp","partialProp","toUpperCase","Array","isArray","pr","trim","createPropertyObject","console","warn","extraCrap","pageTemplates","cssFiles","error","source","destination","modifier","transformed","found","findIndex","t","reOrderPositions","oldPositions","newOrder","sort","a","b","newPositionMap","keyVal","index","copy","list","arr","loc","extraProps","extra","toJS","assign","jsonObject","propertyList","size","el","flat","returnMap","singleProp","storesContext","createContext","appStore","propertiesStore","useStores","useContext","createStyles","itemElement","paddingTop","paddingBottom","textElipsis","display","textOverflow","whiteSpace","dragHandleButton","color","grey","marginRight","nestedLevel1","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","REGEXES","createRule","regExString","rule","regExp","RegExp","DESIGN_PROPERTY_RULE","CLASS_NAME_NATIVE_RULE","CLASS_NAME_WEB_RULE","optionsTable","minHeight","zIndex","top","DropdownProps","observer","classes","tableState","columns","title","field","validate","sorting","cellStyle","match","data","getTableState","editableFunctions","useMemo","onRowUpdate","newData","oldData","setName","setClassName","onRowDelete","removeOption","onRowAdd","addOption","getTableEdit","icons","editable","paging","search","headerStyle","rowStyle","actions","icon","tooltip","onClick","event","rowData","tableData","moveOption","paperMenu","borderRadius","shape","toggleClear","marginLeft","toggleInput","width","ToggleProps","useState","validators","errorMessages","useEffect","elevation","onSubmit","onError","errors","label","placeholder","fullWidth","onChange","e","target","value","helperText","aria-label","onClickCapture","ConfirmDialog","open","onClose","onProceed","confirm","confirmText","cancel","cancelText","aria-labelledby","aria-describedby","autoFocus","DeleteDialog","cancelProps","dialogProps","EditComponent","showAddButton","onDelete","onEdit","onAdd","dialogOpen","toggleDialog","disabled","propertyPanel","marginBottom","listItemIcon","minWidth","textFieldEditProperty","EditPropertyDialog","element","initialName","initialDesciption","initialType","desciption","setDescription","setType","ValidatorForm","addValidationRule","propNames","includes","removeValidationRule","labelId","localStyles","textClass","opacity","Property","property","localClasses","toggle","editDialog","toggleEditDialog","handleClick","button","primary","secondary","deleteSingleProp","in","timeout","unmountOnExit","cursor","collapse","isDragging","pointerEvents","backgroundColor","Item","edit","add","deleteObject","deleteProps","draggableId","provided","innerRef","draggableProps","dragHandleProps","droppableId","isDropDisabled","providedItem","component","disablePadding","innerIndex","providedInner","textFieldEdit","EditSimpleDialog","initialValue","elementTitle","fieldName","PropertyList","localStore","useLocalStore","newPropDialog","selectedProp","toggleIsDragging","toggleEdit","toggleAdd","initDialog","elementName","onDragEnd","result","src","dest","changeLocations","swapPropsInCollection","swapPropsBetweenCollections","onBeforeDragStart","droppableProps","changeProp","addPropertyToCollection","toolBar","toolBarIcon","palette","common","white","formControlTopBar","margin","formControlTopBarInput","textAlign","appBar","TopBar","onHomeClick","isDownloadSupported","Blob","downloadSupported","copyPopper","setCopyPopper","variant","val","fontSize","jsonString","blob","saveAs","debug","format","onCopy","href","viewBox","style","d","fill","anchorOrigin","horizontal","vertical","message","introDialogRoot","introBackdrop","introDialogPaper","introGrid","introButton","justifyContent","introUploadButton","info","main","fade","dark","uploadRoot","uploadInput","OpeningDialog","isEmpty","onLoadAtlasWeb","useCallback","SettingsWebAtlas","onLoadAtlasNative","SettingsNativeAtlas","onLoadEmptyWeb","SettingsWebEmpty","onLoadEmptyNative","SettingsNativeEmpty","onFileChange","files","file","reader","FileReader","onload","evt","res","toString","readAsText","disableBackdropClick","disableEscapeKeyDown","BackdropProps","paper","container","item","xs","startIcon","accept","htmlFor","ClassesBox","classList","pageSize","pageSizeOptions","App","createMuiTheme","addDialogOpen","setAddDialogOpen","openingDialog","switchOpeningDialog","StylesProvider","injectFirst","ThemeProvider","flexDirection","maxHeight","p","addProp","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.309312c6.chunk.js","sourcesContent":["import { makeStyles, Theme } from \"@material-ui/core/styles\";\nexport const useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        flexGrow: 1,\n        height: \"100vh\",\n        overflow: \"hidden\",\n    },\n    mainColumn: {\n        alignItems: \"stretch\",\n        height: `calc(100vh - ${theme.spacing(6)}px)`,\n        marginTop: theme.spacing(6),\n        overflow: \"hidden\",\n    },\n    leftColumn: {\n        maxWidth: \"50%\",\n        height: \"100vh\",\n        overflowX: \"hidden\",\n        overflowY: \"auto\",\n        position: \"relative\",\n    },\n    addButton: {\n        position: \"fixed\",\n        bottom: theme.spacing(1),\n        right: \"50%\",\n    },\n    rightColumn: {\n        maxWidth: \"50%\",\n        height: \"100vh\",\n        overflowX: \"hidden\",\n        overflowY: \"hidden\",\n    },\n    jsonBox: {\n        padding: 0,\n        overflowY: \"auto\",\n    },\n    classesBox: {\n        paddingLeft: 0,\n    },\n}));\n","import { observable, action } from \"mobx\";\nimport { getMode } from \"actions/darkmode\";\nimport { setMode } from \"../actions/darkmode\";\n\nexport class AppStore {\n    @observable\n    darkMode = getMode();\n\n    @action\n    toggleDarkMode() {\n        this.darkMode = !this.darkMode;\n        setMode(this.darkMode);\n    }\n}\n","export const getMode = () => localStorage.getItem(\"darkMode\") === \"true\";\nexport const setMode = (mode: boolean) => localStorage.setItem(\"darkMode\", mode ? \"true\" : \"false\");\n","import { observable, action, computed } from \"mobx\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// TYPES\n\nexport type DesignPropertyType = \"Toggle\" | \"Dropdown\";\n\n// ABSTRACT\n\nexport interface AbstractDesignProperty {\n    id: string;\n    name: string;\n    description: string;\n    oldNames: string[];\n    type: DesignPropertyType;\n}\n\ninterface AbstractDesignConstructorProps {\n    name: string;\n    description: string;\n    oldNames?: string[];\n}\n\nexport interface AbstractDesignPropertyReturn {\n    name: string;\n    description: string;\n    type: DesignPropertyType;\n    oldNames?: string[];\n}\n\nexport class AbstractDesignProperty {\n    id: string = uuidv4();\n\n    @observable name = \"\";\n    @observable description = \"\";\n    @observable oldNames: string[] = [];\n\n    constructor({ name, description, oldNames = [] }: AbstractDesignConstructorProps) {\n        this.name = name;\n        this.description = description;\n        this.oldNames = oldNames;\n    }\n\n    @action\n    setName(name: string): void {\n        this.name = name;\n    }\n\n    @action\n    setDescription(description: string): void {\n        this.description = description;\n    }\n\n    @action\n    setOldNames(names: string[]): void {\n        this.oldNames = names;\n    }\n\n    @computed\n    get jsAbstract(): AbstractDesignPropertyReturn {\n        const ret: AbstractDesignPropertyReturn = {\n            name: this.name,\n            description: this.description,\n            type: this.type,\n        };\n        if (this.oldNames.length > 0) {\n            ret.oldNames = this.oldNames;\n        }\n        return ret;\n    }\n}\n\n// Toggle\n\ninterface ToggleDesignConstructorProps extends AbstractDesignConstructorProps {\n    className: string;\n}\n\nexport interface ToggleDesignPropertyReturn extends AbstractDesignPropertyReturn {\n    class: string;\n}\n\nexport class ToggleDesignProperty extends AbstractDesignProperty {\n    type: DesignPropertyType = \"Toggle\";\n\n    @observable className = \"\";\n\n    constructor({ name, description, className }: ToggleDesignConstructorProps) {\n        super({ name, description });\n        this.className = className;\n    }\n\n    @action\n    setClassName(className: string) {\n        this.className = className;\n    }\n\n    @computed\n    get ignored(): boolean {\n        return this.className === \"\";\n    }\n\n    @computed\n    get jsObject(): ToggleDesignPropertyReturn | null {\n        if (this.ignored) {\n            return null;\n        }\n        return {\n            ...this.jsAbstract,\n            class: this.className,\n        };\n    }\n}\n\n// DropDown\n\nexport interface DropdownDesignPropertyProperty {\n    // This is added because the table set this when doing action. Dirty, but it works\n    tableData: {\n        id: string;\n    };\n}\n\nexport class DropdownDesignPropertyProperty {\n    id: string = uuidv4();\n\n    @observable name = \"\";\n    @observable className = \"\";\n\n    constructor(name: string, className: string) {\n        this.name = name;\n        this.className = className;\n    }\n\n    @action\n    setName(name: string): void {\n        this.name = name;\n    }\n\n    @action\n    setClassName(className: string) {\n        this.className = className;\n    }\n\n    @computed\n    get jsObject() {\n        return {\n            name: this.name,\n            class: this.className,\n        };\n    }\n}\n\ninterface DropdownDesignConstructorProps extends AbstractDesignConstructorProps {\n    options: Array<{\n        name: string;\n        className: string;\n    }>;\n}\n\nexport interface DropdownDesignPropertyOption {\n    name: string;\n    class: string;\n}\n\nexport interface DropdownDesignPropertyReturn extends AbstractDesignPropertyReturn {\n    options: Array<DropdownDesignPropertyOption>;\n}\n\nexport class DropdownDesignProperty extends AbstractDesignProperty {\n    type: DesignPropertyType = \"Dropdown\";\n\n    @observable\n    options: DropdownDesignPropertyProperty[] = [];\n\n    constructor({ name, description, options }: DropdownDesignConstructorProps) {\n        super({ name, description });\n        this.options = options.map(opt => new DropdownDesignPropertyProperty(opt.name, opt.className));\n    }\n\n    @action\n    addOption(name: string, className: string): void {\n        const opts = [...this.options];\n        opts.push(new DropdownDesignPropertyProperty(name, className));\n        this.options = opts;\n    }\n\n    @action\n    removeOption(id: string): void {\n        const filtered = [...this.options.filter(opt => opt.id !== id)];\n        this.options = filtered;\n    }\n\n    @action\n    moveOption(from: number, to: number): void {\n        const listCopy = [...this.options];\n        const { length } = listCopy;\n        if (from >= 0 && to >= 0 && to < length && from < length) {\n            listCopy.splice(to, 0, listCopy.splice(from, 1)[0]);\n            this.options = listCopy;\n        }\n    }\n\n    @computed\n    get ignored(): boolean {\n        return this.options.filter(opt => opt.name && opt.className).length === 0;\n    }\n\n    @computed\n    get jsObject(): DropdownDesignPropertyReturn | null {\n        if (this.ignored) {\n            return null;\n        }\n        const options = this.options.filter(opt => opt.name && opt.className).map(opt => opt.jsObject);\n        return {\n            ...this.jsAbstract,\n            options,\n        };\n    }\n}\n","import { autorun } from \"mobx\";\nimport storage from \"store\";\nimport { PropertiesStore } from \"./properties-store\";\n\nexport const STORAGE_KEY = \"__MX_DESIGN_PROPERTIES_TOOLKIT_SAVE\";\n\nconst autoStore = (store: PropertiesStore) => {\n    let firstRun = true;\n\n    autorun(() => {\n        if (firstRun) {\n            const existing = storage.get(STORAGE_KEY);\n\n            if (existing) {\n                store.setHasLocalStorage(true);\n                store.populateFromJSON(JSON.stringify(existing));\n            }\n        }\n\n        storage.set(STORAGE_KEY, store.JSOBject);\n    });\n\n    firstRun = false;\n};\n\nexport default autoStore;\n","import { observable, action, computed, toJS } from \"mobx\";\nimport {\n    DropdownDesignProperty,\n    ToggleDesignProperty,\n    DropdownDesignPropertyReturn,\n    ToggleDesignPropertyReturn,\n} from \"./objects/design-property\";\n\nimport { DesignPropertiesJSON, createPropertyObject, DesignPropertiesOutputJSON } from \"./objects/json\";\nimport autoStore from \"./storage\";\n\nexport type PropertiesType = \"Web\" | \"Native\" | null;\n\nexport class PropertiesStore {\n    @observable hasLocalStorage = false;\n    @observable type: PropertiesType = null;\n    @observable properties = new Map<string, Array<DropdownDesignProperty | ToggleDesignProperty>>();\n    @observable extraCrap: unknown = {};\n    @observable mapsPositions = new Map<string, number>();\n\n    constructor(json?: string) {\n        autoStore(this);\n\n        if (json) {\n            this.populateFromJSON(json);\n        }\n    }\n\n    @action\n    setHasLocalStorage(state: boolean): void {\n        this.hasLocalStorage = state;\n    }\n\n    @action\n    setType(type?: PropertiesType): void {\n        if (type && this.type !== type) {\n            this.type = type;\n        }\n    }\n\n    @action\n    changeProp(oldName: string, newName: string): void {\n        if (oldName && this.properties.has(oldName) && newName) {\n            const props = this.properties.get(oldName) as Array<DropdownDesignProperty | ToggleDesignProperty>;\n            const pos = this.mapsPositions.get(oldName) as number;\n            this.properties.set(newName, props);\n            this.mapsPositions.delete(oldName);\n            this.mapsPositions.set(newName, pos);\n            this.properties.delete(oldName);\n            // this.reOrderPositions(this.locationsArray);\n        }\n    }\n\n    @action\n    swapPropsInCollection(key: string, from: number, to: number): void {\n        if (this.properties.has(key)) {\n            const listCopy = [...this.propList(key)];\n            const { length } = listCopy;\n            if (from >= 0 && to >= 0 && to < length && from < length) {\n                listCopy.splice(to, 0, listCopy.splice(from, 1)[0]);\n                this.properties.set(key, listCopy);\n            }\n        }\n    }\n\n    @action\n    swapPropsBetweenCollections(sourceKey: string, from: number, targetKey: string, to: number): void {\n        if (this.properties.has(sourceKey) && this.properties.has(targetKey)) {\n            const sourceCopy = this.propList(sourceKey);\n            const targetCopy = this.propList(targetKey);\n            const sourceObject = sourceCopy[from];\n            if (sourceObject) {\n                sourceCopy.splice(from, 1);\n                targetCopy.splice(to, 0, sourceObject);\n                this.properties.set(sourceKey, sourceCopy);\n                this.properties.set(targetKey, targetCopy);\n            }\n        }\n    }\n\n    @action\n    addPropertyToCollection(key: string, prop: DropdownDesignProperty | ToggleDesignProperty): void {\n        if (this.properties.has(key) && prop) {\n            const currentList = this.propList(key);\n            this.properties.set(key, [...currentList, prop]);\n        }\n    }\n\n    @action\n    addProp(key: string): void {\n        const maxPos = this.locationsArray.reduce((max, cur) => Math.max(max, cur.pos), 0);\n        this.properties.set(key, []);\n        this.mapsPositions.set(key, maxPos + 10);\n    }\n\n    @action\n    deleteProps(key: string): void {\n        if (this.mapsPositions.has(key)) {\n            this.mapsPositions.delete(key);\n            this.properties.delete(key);\n        }\n    }\n\n    @action\n    deleteSingleProp(id: string): void {\n        if (this.idMap.has(id)) {\n            const key = this.idMap.get(id) as string;\n            const props = this.propList(key);\n            this.properties.set(\n                key,\n                props.filter(prop => prop.id !== id),\n            );\n        }\n    }\n\n    @action\n    populateFromJSON(jsonStr: string): void {\n        try {\n            const newMap = new Map<string, Array<DropdownDesignProperty | ToggleDesignProperty>>();\n            const newMapPositions = new Map<string, number>();\n\n            const JSONObject: DesignPropertiesJSON = JSON.parse(jsonStr);\n\n            if (JSONObject.designProperties && typeof JSONObject.designProperties === \"object\") {\n                const props = JSONObject.designProperties;\n                const keys = Object.keys(props);\n                keys.forEach((key, i) => {\n                    const designProperties = props[key];\n                    const objectArray: Array<DropdownDesignProperty | ToggleDesignProperty> = [];\n                    designProperties.forEach(designProperty => {\n                        const newProp = createPropertyObject(designProperty);\n                        if (newProp !== null) {\n                            objectArray.push(newProp);\n                        } else {\n                            console.warn(`Unable to parse for ${key}: ${designProperty}`);\n                        }\n                    });\n                    newMap.set(key, objectArray);\n                    newMapPositions.set(key, (i + 1) * 10);\n                });\n            } else {\n                this.properties = newMap;\n                this.mapsPositions = newMapPositions;\n                throw Error(\"This does not seem to be a valid Properties file!\");\n            }\n\n            this.properties = newMap;\n            this.mapsPositions = newMapPositions;\n\n            const extraCrap: { pageTemplates?: string; cssFiles?: string[] } = {};\n\n            if (typeof JSONObject.pageTemplates !== \"undefined\" || typeof JSONObject.cssFiles !== \"undefined\") {\n                this.type = \"Web\";\n\n                if (JSONObject.pageTemplates) {\n                    extraCrap.pageTemplates = JSONObject.pageTemplates;\n                }\n                if (JSONObject.cssFiles) {\n                    extraCrap.cssFiles = JSONObject.cssFiles;\n                }\n            } else {\n                this.type = \"Native\";\n            }\n\n            this.extraCrap = extraCrap;\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    @action\n    changeLocations(source: number, destination: number): void {\n        if (source === destination) {\n            return;\n        }\n        const modifier = source < destination ? 1 : 0;\n        const transformed = [...this.locationsArray];\n        const found = transformed.findIndex(t => t.pos === (source + 1) * 10);\n        if (found !== -1) {\n            transformed[found].pos = (destination + modifier) * 10 + 5;\n            this.reOrderPositions(transformed);\n        }\n    }\n\n    @action\n    reOrderPositions(oldPositions: Array<{ key: string; pos: number }>): void {\n        const newOrder = [...oldPositions.sort((a, b) => a.pos - b.pos)];\n        const newPositionMap = new Map<string, number>();\n        newOrder.forEach((keyVal, index) => {\n            newPositionMap.set(keyVal.key, (index + 1) * 10);\n        });\n        this.mapsPositions = newPositionMap;\n    }\n\n    @computed\n    get locationsArray(): Array<{ key: string; pos: number }> {\n        return Array.from(this.mapsPositions)\n            .map(arr => ({ key: arr[0], pos: arr[1] }))\n            .sort((a, b) => a.pos - b.pos);\n    }\n\n    @computed\n    get keys(): string[] {\n        return Array.from(this.properties.keys());\n    }\n\n    @computed\n    get propertyList() {\n        return this.locationsArray.map(loc => {\n            const properties = this.properties.get(loc.key) as Array<DropdownDesignProperty | ToggleDesignProperty>;\n            return {\n                name: loc.key,\n                position: loc.pos as number,\n                properties,\n            };\n        });\n    }\n\n    @computed\n    get JSOBject(): DesignPropertiesOutputJSON {\n        let extraProps: Partial<DesignPropertiesJSON> = {};\n        if (this.type === \"Web\") {\n            const extra = toJS(this.extraCrap);\n            extraProps = Object.assign(extraProps, extra);\n        }\n        const jsonObject: DesignPropertiesOutputJSON = Object.assign(extraProps, {\n            designProperties: {},\n        }) as DesignPropertiesOutputJSON;\n        this.propertyList.forEach(prop => {\n            const properties = prop.properties.map(prop => prop.jsObject).filter(prop => prop !== null) as Array<\n                DropdownDesignPropertyReturn | ToggleDesignPropertyReturn\n            >;\n            if (properties.length > 0) {\n                jsonObject.designProperties[prop.name] = properties;\n            }\n        });\n\n        return toJS(jsonObject);\n    }\n\n    @computed\n    get isEmpty() {\n        return this.properties.size === 0;\n    }\n\n    @computed\n    get classList() {\n        return this.propertyList\n            .map(el =>\n                el.properties.map(prop => {\n                    return prop instanceof DropdownDesignProperty\n                        ? prop.options.map(opt => ({ el: el.name, prop: prop.name, class: opt.className }))\n                        : [{ el: el.name, prop: prop.name, class: prop.className }];\n                }),\n            )\n            .flat(2);\n    }\n\n    private propList(key: string, copy = true) {\n        const list = this.properties.get(key) as Array<DropdownDesignProperty | ToggleDesignProperty>;\n        return copy ? [...list] : list;\n    }\n\n    private get idMap(): Map<string, string> {\n        const returnMap = new Map<string, string>();\n        this.propertyList.forEach(prop => {\n            prop.properties.forEach(singleProp => {\n                returnMap.set(singleProp.id, prop.name);\n            });\n        });\n        return returnMap;\n    }\n\n    public propNames(key: string) {\n        if (this.properties.has(key)) {\n            return this.propList(key).map(prop => prop.name);\n        }\n        return [];\n    }\n}\n","import {\n    DropdownDesignProperty,\n    ToggleDesignProperty,\n    ToggleDesignPropertyReturn,\n    DropdownDesignPropertyReturn,\n} from \"./design-property\";\ninterface JSONProperty {\n    name?: string;\n    oldNames?: string[];\n    type?: string;\n    description?: string;\n    class?: string;\n    options?: Array<{\n        name?: string;\n        class?: string;\n    }>;\n}\n\nexport interface DesignPropertiesJSON {\n    pageTemplates?: string;\n    cssFiles?: string[];\n    designProperties?: {\n        [key: string]: JSONProperty[];\n    };\n}\n\nexport const createPropertyObject = (prop: JSONProperty): DropdownDesignProperty | ToggleDesignProperty | null => {\n    if (!prop.name || !prop.type || !prop.description) {\n        return null;\n    }\n    const partialProp = {\n        name: prop.name,\n        description: prop.description,\n        oldNames: prop.oldNames || [],\n    };\n    const type = prop.type.toUpperCase();\n    if (type === \"DROPDOWN\" && Array.isArray(prop.options)) {\n        const options: { name: string; className: string }[] = prop.options\n            .filter(pr => typeof pr.name !== \"undefined\" && pr.name && typeof pr.class !== \"undefined\" && pr.class)\n            .map(pr => {\n                return {\n                    name: pr.name?.trim(),\n                    className: pr.class?.trim(),\n                };\n            }) as { name: string; className: string }[];\n        return new DropdownDesignProperty({\n            ...partialProp,\n            options,\n        });\n    } else if (type === \"TOGGLE\" && prop.class) {\n        return new ToggleDesignProperty({\n            ...partialProp,\n            className: prop.class,\n        });\n    }\n\n    return null;\n};\n\nexport interface DesignPropertiesOutputJSON {\n    pageTemplates?: string;\n    cssFiles?: string[];\n    designProperties: {\n        [key: string]: Array<ToggleDesignPropertyReturn | DropdownDesignPropertyReturn>;\n    };\n}\n","import { AppStore } from \"../store/app-store\";\nimport { createContext } from \"react\";\nimport { PropertiesStore } from \"../store/properties-store\";\n\nexport const storesContext = createContext({\n    appStore: new AppStore(),\n    propertiesStore: new PropertiesStore(),\n});\n","import { useContext } from \"react\";\nimport { storesContext } from \"../context/index\";\n\nexport const useStores = () => useContext(storesContext);\n","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { grey } from \"@material-ui/core/colors\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        itemElement: {\n            paddingTop: 0,\n            paddingBottom: 0,\n        },\n        textElipsis: {\n            display: \"block\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\",\n        },\n        dragHandleButton: {\n            color: grey[500],\n            marginRight: theme.spacing(1),\n        },\n        nestedLevel1: {\n            paddingLeft: theme.spacing(4),\n            paddingTop: 0,\n            paddingBottom: 0,\n        },\n    }),\n);\n","import React, { forwardRef } from \"react\";\n\nimport AddToPhotosOutlinedIcon from \"@material-ui/icons/AddToPhotosOutlined\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutlined from \"@material-ui/icons/DeleteOutlined\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nimport { Column } from \"material-table\";\nimport { DropdownDesignPropertyProperty } from \"store/objects/design-property\";\n\nexport const tableIcons = {\n    Add: forwardRef<SVGSVGElement>((props, ref) => <AddToPhotosOutlinedIcon {...props} ref={ref} />),\n    Check: forwardRef<SVGSVGElement>((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef<SVGSVGElement>((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef<SVGSVGElement>((props, ref) => <DeleteOutlined {...props} ref={ref} />),\n    DetailPanel: forwardRef<SVGSVGElement>((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef<SVGSVGElement>((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef<SVGSVGElement>((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef<SVGSVGElement>((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef<SVGSVGElement>((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef<SVGSVGElement>((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef<SVGSVGElement>((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef<SVGSVGElement>((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef<SVGSVGElement>((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef<SVGSVGElement>((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef<SVGSVGElement>((props, ref) => <ArrowDownward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef<SVGSVGElement>((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef<SVGSVGElement>((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nexport interface TableState {\n    columns: Array<Column<DropdownDesignPropertyProperty>>;\n    data: DropdownDesignPropertyProperty[];\n}\n\nexport interface TableEdit {\n    isEditable?: (rowData: DropdownDesignPropertyProperty) => boolean;\n    isDeletable?: (rowData: DropdownDesignPropertyProperty) => boolean;\n    onRowAdd?: (newData: DropdownDesignPropertyProperty) => Promise<any>;\n    onRowUpdate?: (newData: DropdownDesignPropertyProperty, oldData?: DropdownDesignPropertyProperty) => Promise<any>;\n    onRowDelete?: (oldData: DropdownDesignPropertyProperty) => Promise<any>;\n    editTooltip?: (rowData: DropdownDesignPropertyProperty) => string;\n    deleteTooltip?: (rowData: DropdownDesignPropertyProperty) => string;\n    onRowAddCancelled?: (rowData: DropdownDesignPropertyProperty) => void;\n    onRowUpdateCancelled?: (rowData: DropdownDesignPropertyProperty) => void;\n    isEditHidden?: (rowData: DropdownDesignPropertyProperty) => boolean;\n    isDeleteHidden?: (rowData: DropdownDesignPropertyProperty) => boolean;\n}\n","export const REGEXES = {\n    DESIGN_PROPERTY: \"^[a-zA-Z.]+$\",\n    CLASS_NAME_NATIVE: \"^[a-zA-Z]+$\",\n    CLASS_NAME_WEB: \"^[a-z-_]+$\",\n};\n\nexport interface ValidatorRule {\n    rule: string;\n    regExp: RegExp;\n    error: string;\n}\n\nconst createRule = (regExString: string, error: string): ValidatorRule => {\n    return {\n        rule: `matchRegexp:${regExString}`,\n        regExp: new RegExp(regExString),\n        error,\n    };\n};\n\nexport const DESIGN_PROPERTY_RULE = createRule(\n    REGEXES.DESIGN_PROPERTY,\n    \"Design Property Elements can only consist of letters and dots (.)\",\n);\n\nexport const CLASS_NAME_NATIVE_RULE = createRule(\n    REGEXES.CLASS_NAME_NATIVE,\n    \"Native classes can only be written as pascalCase (e.g. 'myAwesomeVariation')\",\n);\n\nexport const CLASS_NAME_WEB_RULE = createRule(\n    REGEXES.CLASS_NAME_WEB,\n    \"Web classes should only use lowercase letters and hyphens (e.g. 'spacing-outer-bottom')\",\n);\n","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        optionsTable: {\n            \"& > .MuiPaper-root\": {\n                \"& > .MuiToolbar-root\": {\n                    minHeight: theme.spacing(1),\n                    position: \"relative\",\n                    \"& .MuiButtonBase-root.MuiIconButton-root\": {\n                        position: \"absolute\",\n                        right: 0,\n                        zIndex: 100,\n                        top: 0,\n                    },\n                },\n                \"& .MuiButtonBase-root\": {\n                    padding: theme.spacing(1),\n                },\n                \"& .MuiIconButton-root\": {\n                    padding: theme.spacing(1),\n                },\n            },\n        },\n    }),\n);\n","import React, { FC, useMemo } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { DropdownDesignProperty, DropdownDesignPropertyProperty } from \"store/objects/design-property\";\n\nimport MaterialTable from \"material-table\";\nimport { tableIcons, TableEdit, TableState } from \"./_dropdownTable\";\nimport { useStores } from \"../../hooks/use-stores\";\nimport { PropertiesType } from \"../../store/properties-store\";\nimport { CLASS_NAME_NATIVE_RULE, CLASS_NAME_WEB_RULE } from \"../../util/validationRules\";\nimport { useStyles } from \"./style\";\n\nimport ArrowDropDownOutlinedIcon from \"@material-ui/icons/ArrowDropDownOutlined\";\nimport ArrowDropUpOutlinedIcon from \"@material-ui/icons/ArrowDropUpOutlined\";\n\nconst getTableEdit = (prop: DropdownDesignProperty): TableEdit => {\n    return {\n        onRowUpdate: async (newData, oldData) => {\n            if (oldData && oldData.id && newData.name && newData.className) {\n                oldData.setName(newData.name);\n                oldData.setClassName(newData.className);\n            } else {\n                return false;\n            }\n            return true;\n        },\n        onRowDelete: async oldData => {\n            prop.removeOption(oldData.id);\n        },\n        onRowAdd: async newData => {\n            if (newData.name && newData.className) {\n                prop.addOption(newData.name, newData.className);\n            }\n        },\n    };\n};\n\nconst getTableState = (options: DropdownDesignPropertyProperty[], type: PropertiesType): TableState => {\n    return {\n        columns: [\n            {\n                title: \"Name\",\n                field: \"name\",\n                validate: ({ name }) => {\n                    if (!name) {\n                        return \"Name cannot be empty!\";\n                    }\n                    return true;\n                },\n                sorting: false,\n                cellStyle: {\n                    padding: 8,\n                },\n            },\n            {\n                title: \"Class\",\n                field: \"className\",\n                validate: ({ className }) => {\n                    if (!className) {\n                        return \"Class cannot be empty!\";\n                    }\n                    if (type === \"Native\" && !className.match(CLASS_NAME_NATIVE_RULE.regExp)) {\n                        return CLASS_NAME_NATIVE_RULE.error;\n                    }\n                    if (type === \"Web\" && !className.match(CLASS_NAME_WEB_RULE.regExp)) {\n                        return CLASS_NAME_WEB_RULE.error;\n                    }\n                    return true;\n                },\n                sorting: false,\n                cellStyle: {\n                    padding: 8,\n                },\n            },\n        ],\n        data: options,\n    };\n};\n\nconst DropdownProps: FC<{ prop: DropdownDesignProperty }> = observer(({ prop }) => {\n    const { options } = prop;\n    const classes = useStyles();\n    const { propertiesStore } = useStores();\n    const tableState = getTableState(options, propertiesStore.type);\n    const editableFunctions: TableEdit = useMemo(() => getTableEdit(prop), [prop]);\n\n    const upButton = () => <ArrowDropUpOutlinedIcon />;\n    const downButton = () => <ArrowDropDownOutlinedIcon />;\n\n    const moveUp = (pos: number) => {\n        if (pos > 0) {\n            prop.moveOption(pos, pos - 1);\n        }\n    };\n\n    const moveDown = (pos: number) => {\n        if (pos < prop.options.length - 1) {\n            prop.moveOption(pos, pos + 1);\n        }\n    };\n\n    return (\n        <div className={classes.optionsTable}>\n            <MaterialTable\n                icons={tableIcons}\n                title=\"\"\n                columns={tableState.columns}\n                data={tableState.data}\n                editable={editableFunctions}\n                options={{\n                    paging: false,\n                    search: false,\n                    headerStyle: {},\n                    rowStyle: {\n                        padding: 0,\n                    },\n                }}\n                actions={[\n                    {\n                        icon: downButton,\n                        tooltip: \"Move down\",\n                        onClick: (event, rowData) => {\n                            if (\n                                rowData instanceof DropdownDesignPropertyProperty &&\n                                typeof rowData.tableData.id !== \"undefined\"\n                            ) {\n                                moveDown(+rowData.tableData.id);\n                            }\n                        },\n                    },\n                    {\n                        icon: upButton,\n                        tooltip: \"Move up\",\n                        onClick: (event, rowData) => {\n                            if (\n                                rowData instanceof DropdownDesignPropertyProperty &&\n                                typeof rowData.tableData.id !== \"undefined\"\n                            ) {\n                                moveUp(+rowData.tableData.id);\n                            }\n                        },\n                    },\n                ]}\n            />\n        </div>\n    );\n});\n\nexport default DropdownProps;\n","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paperMenu: {\n            borderRadius: theme.shape.borderRadius,\n            padding: theme.spacing(2),\n        },\n        toggleClear: {\n            display: \"inline-flex\",\n            marginTop: theme.spacing(4),\n            marginLeft: 0 - theme.spacing(2),\n        },\n        toggleInput: {\n            padding: theme.spacing(2),\n            width: `calc(100% - ${theme.spacing(4)}px)`,\n        },\n    }),\n);\n\nexport default useStyles;\n","import React, { FC, useState, useEffect, useMemo } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { useStyles } from \"./style\";\nimport { ToggleDesignProperty } from \"store/objects/design-property\";\nimport { Paper, IconButton } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { useStores } from \"../../hooks/use-stores\";\nimport { CLASS_NAME_NATIVE_RULE, CLASS_NAME_WEB_RULE } from \"../../util/validationRules\";\n\nimport ClearOutlinedIcon from \"@material-ui/icons/ClearOutlined\";\n\nconst ToggleProps: FC<{ prop: ToggleDesignProperty }> = observer(({ prop }) => {\n    const { className } = prop;\n    const { propertiesStore } = useStores();\n    const classes = useStyles();\n\n    const [name, setName] = useState(className || \"\");\n\n    const [validators, errorMessages] = useMemo(() => {\n        const validators = [\"required\"];\n        const errorMessages = [`A class name is required for this property, otherwise it is ignored`];\n\n        if (propertiesStore.type === \"Native\") {\n            validators.push(CLASS_NAME_NATIVE_RULE.rule);\n            errorMessages.push(CLASS_NAME_NATIVE_RULE.error);\n        } else if (propertiesStore.type === \"Web\") {\n            validators.push(CLASS_NAME_WEB_RULE.rule);\n            errorMessages.push(CLASS_NAME_WEB_RULE.error);\n        }\n\n        return [validators, errorMessages];\n    }, [propertiesStore.type]);\n\n    useEffect(() => {\n        setName(className);\n        return () => {\n            setName(\"\");\n        };\n    }, [className]);\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n        const target = e.target as HTMLInputElement;\n        setName(target.value);\n    };\n\n    const handleSubmit = () => {\n        if (name) {\n            prop.setClassName(name);\n        }\n    };\n\n    const reset = () => {\n        setName(className);\n    };\n\n    return (\n        <Paper elevation={2} className={classes.paperMenu}>\n            <ValidatorForm onSubmit={handleSubmit} onError={errors => console.warn(\"Validation errors\", errors)}>\n                <TextValidator\n                    className={classes.toggleInput}\n                    id=\"standard-full-width\"\n                    label=\"Class name\"\n                    placeholder=\"className\"\n                    fullWidth\n                    onChange={onChange}\n                    helperText={className !== name ? \"Not saved yet, press Enter to set text\" : \"\"}\n                    name=\"editDialogField1\"\n                    value={name}\n                    validators={validators}\n                    errorMessages={errorMessages}\n                />\n                {className !== name ? (\n                    <IconButton aria-label=\"clear\" onClickCapture={reset} size=\"small\" className={classes.toggleClear}>\n                        <ClearOutlinedIcon />\n                    </IconButton>\n                ) : null}\n            </ValidatorForm>\n        </Paper>\n    );\n});\n\nexport default ToggleProps;\n","import React, { FC } from \"react\";\n\nimport { Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText, Button } from \"@material-ui/core\";\n\nexport interface ConfirmDialogProps {\n    open: boolean;\n    onClose: () => void;\n    onProceed: () => void;\n    title: string;\n    description: string;\n    confirmText?: string;\n    cancelText?: string;\n}\n\nconst ConfirmDialog: FC<ConfirmDialogProps> = ({\n    open,\n    onClose,\n    onProceed,\n    title,\n    description,\n    confirmText,\n    cancelText,\n}) => {\n    const confirm = confirmText || \"Yes\";\n    const cancel = cancelText || \"No\";\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">{description}</DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"primary\">\n                    {cancel}\n                </Button>\n                <Button onClick={onProceed} color=\"primary\" autoFocus>\n                    {confirm}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default ConfirmDialog;\n\nexport interface DeleteDialogProps {\n    open: boolean;\n    onClose: () => void;\n    onProceed: () => void;\n}\n\nexport const DeleteDialog: FC<DeleteDialogProps> = cancelProps => {\n    const dialogProps: ConfirmDialogProps = {\n        ...cancelProps,\n        title: \"Are you sure you want to delete this?\",\n        description: \"This change cannot be undone!\",\n    };\n    return <ConfirmDialog {...dialogProps} />;\n};\n","import React, { Fragment, FC, useState } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nimport DeleteOutlined from \"@material-ui/icons/DeleteOutlined\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\n\nimport { DeleteDialog } from \"../ConfirmDialogs\";\n\nconst EditComponent: FC<{\n    showAddButton?: boolean;\n    onDelete?: () => void;\n    onEdit?: () => void;\n    onAdd?: () => void;\n}> = observer(({ showAddButton, onDelete, onEdit, onAdd }) => {\n    const [dialogOpen, toggleDialog] = useState(false);\n\n    const handleClose = () => {\n        toggleDialog(false);\n    };\n\n    const deleteObject = () => {\n        toggleDialog(false);\n        onDelete ? onDelete() : console.warn(\"Not implemented yet\");\n    };\n\n    const handleEdit = () => {\n        onEdit ? onEdit() : console.warn(\"Not implemented yet\");\n    };\n\n    const handleAdd = () => {\n        onAdd ? onAdd() : console.warn(\"Not implemented yet\");\n    };\n\n    return (\n        <Fragment>\n            {showAddButton ? (\n                <IconButton aria-label=\"add\" onClick={handleAdd} size=\"small\" disabled={!onAdd}>\n                    <AddOutlinedIcon />\n                </IconButton>\n            ) : null}\n            <IconButton aria-label=\"edit\" onClick={handleEdit} size=\"small\" disabled={!onEdit}>\n                <EditOutlinedIcon />\n            </IconButton>\n            <IconButton aria-label=\"delete\" onClick={() => toggleDialog(true)} size=\"small\" disabled={!onDelete}>\n                <DeleteOutlined />\n            </IconButton>\n            <DeleteDialog open={dialogOpen} onClose={handleClose} onProceed={deleteObject} />\n        </Fragment>\n    );\n});\n\nexport default EditComponent;\n","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        nestedLevel1: {\n            paddingLeft: theme.spacing(4),\n            paddingTop: 0,\n            paddingBottom: 0,\n        },\n        propertyPanel: {\n            paddingLeft: theme.spacing(4),\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n\n        listItemIcon: {\n            minWidth: theme.spacing(5),\n        },\n    }),\n);\n\nexport default useStyles;\n","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        fullWidth: {\n            width: \"100%\",\n        },\n        textFieldEditProperty: {\n            minWidth: theme.spacing(60),\n            marginBottom: theme.spacing(1),\n        },\n    }),\n);\n","import React, { FC, useEffect, useState } from \"react\";\n\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n} from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { useStyles } from \"./style\";\nimport { DesignPropertyType } from \"../../store/objects/design-property\";\nimport { useStores } from \"../../hooks/use-stores\";\n\nexport interface EditPropertyDialogProps {\n    open: boolean;\n\n    element: string;\n\n    initialName?: string | null;\n    initialDesciption?: string | null;\n    initialType?: DesignPropertyType | null;\n\n    onClose: () => void;\n    onProceed: (name: string, description: string, type: DesignPropertyType) => void;\n}\n\nexport const EditPropertyDialog: FC<EditPropertyDialogProps> = ({\n    open,\n    element,\n    initialName,\n    initialDesciption,\n    initialType,\n    onClose,\n    onProceed,\n}) => {\n    const classes = useStyles();\n\n    const [name, setName] = useState(initialName || \"\");\n    const [desciption, setDescription] = useState(initialDesciption || \"\");\n    const [type, setType] = useState<DesignPropertyType>(\"Dropdown\");\n\n    const { propertiesStore } = useStores();\n\n    useEffect(() => {\n        setName(initialName || \"\");\n        setDescription(initialDesciption || \"\");\n        setType(initialType || \"Dropdown\");\n        return () => {\n            setName(\"\");\n            setDescription(\"\");\n            setType(\"Dropdown\");\n        };\n    }, [open, initialName, initialDesciption, initialType]);\n\n    useEffect(() => {\n        ValidatorForm.addValidationRule(\"propName\", (value: string) => {\n            const keys = element ? propertiesStore.propNames(element) : [];\n            if (element && value && value !== initialName && keys.includes(value)) {\n                return false;\n            }\n            return true;\n        });\n        const cleanup = () => {\n            ValidatorForm.removeValidationRule(\"propName\");\n        };\n        return cleanup;\n    });\n\n    const onChangeName = (e: React.FormEvent<HTMLInputElement>) => {\n        const target = e.target as HTMLInputElement;\n        setName(target.value);\n    };\n\n    const onChangeDesciption = (e: React.FormEvent<HTMLInputElement>) => {\n        const target = e.target as HTMLInputElement;\n        setDescription(target.value);\n    };\n\n    const onChangeType = (\n        event: React.ChangeEvent<{\n            value: unknown;\n        }>,\n    ) => {\n        const target = event.target as HTMLSelectElement;\n        setType(target.value as DesignPropertyType);\n    };\n\n    const handleSubmit = () => {\n        onProceed(name, desciption, type);\n    };\n\n    return (\n        <Dialog\n            open={open}\n            maxWidth=\"md\"\n            onClose={onClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <ValidatorForm onSubmit={handleSubmit} onError={errors => console.warn(\"Validation errors\", errors)}>\n                <DialogTitle id=\"alert-dialog-title\">Property : {initialType ? \"Edit\" : \"Add\"}</DialogTitle>\n                <DialogContent>\n                    {initialType ? null : (\n                        <FormControl className={classes.fullWidth}>\n                            <InputLabel id=\"type-selector\">Type</InputLabel>\n                            <Select\n                                labelId=\"type-selector\"\n                                id=\"type-selector-select\"\n                                value={type}\n                                onChange={onChangeType}\n                            >\n                                <MenuItem value={\"Dropdown\"}>Dropdown</MenuItem>\n                                <MenuItem value={\"Toggle\"}>Toggle</MenuItem>\n                            </Select>\n                        </FormControl>\n                    )}\n                    <TextValidator\n                        className={classes.textFieldEditProperty}\n                        label={\"Name\"}\n                        fullWidth\n                        autoFocus\n                        onChange={onChangeName}\n                        name=\"editDialogField1\"\n                        value={name}\n                        validators={[\"required\", \"propName\"]}\n                        errorMessages={[\n                            `Name is required`,\n                            `You already have a propery with the name '${name}' in '${element}'`,\n                        ]}\n                    />\n                    <TextValidator\n                        className={classes.textFieldEditProperty}\n                        label={\"Description\"}\n                        fullWidth\n                        onChange={onChangeDesciption}\n                        name=\"editDialogField2\"\n                        value={desciption}\n                        validators={[\"required\"]}\n                        errorMessages={[`Desciption is required`]}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button color=\"primary\" type=\"submit\">\n                        OK\n                    </Button>\n                </DialogActions>\n            </ValidatorForm>\n        </Dialog>\n    );\n};\n","import React, { FC, useState, Fragment } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { ListItem, ListItemText, ListItemIcon, Collapse } from \"@material-ui/core\";\n\nimport ToggleOffOutlinedIcon from \"@material-ui/icons/ToggleOffOutlined\";\nimport ListOutlinedIcon from \"@material-ui/icons/ListOutlined\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\n\nimport { DropdownDesignProperty, ToggleDesignProperty } from \"store/objects/design-property\";\nimport { useStores } from \"hooks/use-stores\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DropdownProps from \"../DropdownProps\";\nimport ToggleProps from \"../ToggleProps\";\nimport EditComponent from \"../EditComponent\";\nimport { useStyles } from \"./style\";\nimport { EditPropertyDialog } from \"../EditPropertyDialog\";\n\ninterface LocalStyleProps {\n    ignored?: boolean;\n}\nconst localStyles = makeStyles(() => ({\n    textClass: (props: LocalStyleProps) => ({\n        opacity: props.ignored ? 0.4 : 1,\n    }),\n}));\n\nconst Property: FC<{\n    property: DropdownDesignProperty | ToggleDesignProperty;\n    element: string;\n}> = observer(({ property, element }) => {\n    const { propertiesStore } = useStores();\n    const classes = useStyles();\n    const localClasses = localStyles({ ignored: property.ignored });\n    const { name, description, type } = property;\n\n    const [open, toggle] = useState(false);\n    const [editDialog, toggleEditDialog] = useState(false);\n\n    const handleClick = () => {\n        toggle(!open);\n    };\n\n    const deleteObject = () => {\n        propertiesStore.deleteSingleProp(property.id);\n    };\n\n    const updateObject = (name: string, description: string) => {\n        if (name && description) {\n            property.setName(name);\n            property.setDescription(description);\n        }\n        toggleEditDialog(false);\n    };\n\n    return (\n        <Fragment>\n            <ListItem className={classes.nestedLevel1} button>\n                <ListItemIcon className={classes.listItemIcon} onClick={handleClick}>\n                    {type === \"Dropdown\" ? <ListOutlinedIcon /> : <ToggleOffOutlinedIcon />}\n                </ListItemIcon>\n                <ListItemText\n                    className={localClasses.textClass}\n                    primary={name}\n                    secondary={description}\n                    onClick={handleClick}\n                />\n                <EditComponent\n                    showAddButton={false}\n                    onEdit={() => {\n                        toggleEditDialog(true);\n                    }}\n                    onDelete={() => {\n                        deleteObject();\n                    }}\n                />\n                {open ? <ExpandLess onClick={handleClick} /> : <ExpandMore onClick={handleClick} />}\n            </ListItem>\n            <Collapse in={open} timeout=\"auto\" unmountOnExit className={classes.propertyPanel}>\n                {property instanceof DropdownDesignProperty ? (\n                    <DropdownProps prop={property as DropdownDesignProperty} />\n                ) : (\n                    <ToggleProps prop={property as ToggleDesignProperty} />\n                )}\n            </Collapse>\n            <EditPropertyDialog\n                open={editDialog}\n                element={element}\n                onClose={() => toggleEditDialog(false)}\n                initialName={property.name}\n                initialDesciption={property.description}\n                initialType={property.type}\n                onProceed={updateObject}\n            />\n        </Fragment>\n    );\n});\n\nexport default Property;\n","import React, { Fragment, FC, useState } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { List, ListItem, ListItemText, Collapse, Divider } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport AppsOutlinedIcon from \"@material-ui/icons/AppsOutlined\";\n\nimport { useStyles } from \"./style\";\nimport { useStores } from \"../../hooks/use-stores\";\nimport { DropdownDesignProperty, ToggleDesignProperty } from \"store/objects/design-property\";\nimport Property from \"../Property\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport EditComponent from \"../EditComponent\";\nimport { grey } from \"@material-ui/core/colors\";\n\ninterface LocalStyleProps {\n    ignored?: boolean;\n    isDragging?: boolean;\n}\n\nconst localStyles = makeStyles(() => ({\n    textClass: (props: LocalStyleProps) => ({\n        cursor: \"pointer\",\n        opacity: props.ignored ? 0.4 : 1,\n    }),\n    collapse: (props: LocalStyleProps) => {\n        return props.isDragging\n            ? {\n                  pointerEvents: \"none\",\n                  backgroundColor: grey[200],\n                  opacity: 0.4,\n              }\n            : {};\n    },\n}));\n\nconst Item: FC<{\n    name: string;\n    properties: (DropdownDesignProperty | ToggleDesignProperty)[];\n    index: number;\n    isDragging?: boolean;\n    edit: (name: string) => void;\n    add: () => void;\n}> = observer(({ name, properties, index, edit, isDragging, add }) => {\n    const { propertiesStore } = useStores();\n    const classes = useStyles();\n    const localClasses = localStyles({ ignored: properties.length === 0, isDragging });\n\n    const [open, toggle] = useState(false);\n\n    const handleClick = () => {\n        toggle(!open);\n    };\n\n    const deleteObject = () => {\n        propertiesStore.deleteProps(name);\n    };\n\n    return (\n        <Fragment>\n            <Draggable draggableId={name} index={index}>\n                {provided => (\n                    <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                        <ListItem button className={classes.itemElement}>\n                            <AppsOutlinedIcon className={classes.dragHandleButton} />\n                            <ListItemText onClick={handleClick} className={localClasses.textClass}>\n                                <span className={classes.textElipsis}>{name}</span>\n                            </ListItemText>\n                            <EditComponent\n                                showAddButton={open}\n                                onDelete={deleteObject}\n                                onEdit={() => edit(name)}\n                                onAdd={add}\n                            />\n                            {open ? <ExpandLess onClick={handleClick} /> : <ExpandMore onClick={handleClick} />}\n                        </ListItem>\n                        {open ? <Divider /> : null}\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit className={localClasses.collapse}>\n                            <Droppable droppableId={name} type=\"INNERLIST\" isDropDisabled={isDragging}>\n                                {providedItem => (\n                                    <List component=\"div\" disablePadding ref={providedItem.innerRef}>\n                                        {properties.map((prop, innerIndex) => (\n                                            <Draggable draggableId={prop.id} index={innerIndex} key={prop.id}>\n                                                {providedInner => (\n                                                    <div\n                                                        ref={providedInner.innerRef}\n                                                        {...providedInner.draggableProps}\n                                                        {...providedInner.dragHandleProps}\n                                                    >\n                                                        <Property property={prop} element={name} />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {properties.length === 0 ? (\n                                            <ListItem component=\"div\" className={classes.nestedLevel1}>\n                                                <ListItemText>\n                                                    <span className={classes.textElipsis}>-- Empty --</span>\n                                                </ListItemText>\n                                            </ListItem>\n                                        ) : null}\n                                        {providedItem.placeholder}\n                                    </List>\n                                )}\n                            </Droppable>\n                        </Collapse>\n                    </div>\n                )}\n            </Draggable>\n            <Divider />\n        </Fragment>\n    );\n});\n\nexport default Item;\n","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        textFieldEdit: {\n            minWidth: theme.spacing(60),\n        },\n    }),\n);\n","import React, { FC, useEffect, useState } from \"react\";\n\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from \"@material-ui/core\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { useStyles } from \"./style\";\nimport { DESIGN_PROPERTY_RULE } from \"../../util/validationRules\";\nimport { useStores } from \"../../hooks/use-stores\";\n\nexport interface EditSimpleDialogProps {\n    open: boolean;\n    elementTitle: string;\n    fieldName?: string;\n    initialValue?: string | null;\n    onClose: () => void;\n    onProceed: (value: string) => void;\n}\n\nexport const EditSimpleDialog: FC<EditSimpleDialogProps> = ({\n    open,\n    onClose,\n    onProceed,\n    initialValue,\n    elementTitle,\n    fieldName,\n}) => {\n    const classes = useStyles();\n    const [name, setName] = useState(initialValue || \"\");\n    const field = fieldName || \"Name\";\n    const { propertiesStore } = useStores();\n\n    useEffect(() => {\n        setName(initialValue || \"\");\n        return () => {\n            setName(\"\");\n        };\n    }, [open, initialValue]);\n\n    useEffect(() => {\n        ValidatorForm.addValidationRule(\"elementName\", (value: string) => {\n            if (value && value !== initialValue && propertiesStore.keys.includes(value)) {\n                return false;\n            }\n            return true;\n        });\n        const cleanup = () => {\n            ValidatorForm.removeValidationRule(\"elementName\");\n        };\n        return cleanup;\n    });\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n        const target = e.target as HTMLInputElement;\n        setName(target.value);\n    };\n\n    const handleSubmit = () => {\n        onProceed(name);\n    };\n\n    return (\n        <Dialog\n            open={open}\n            maxWidth=\"md\"\n            onClose={onClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <ValidatorForm onSubmit={handleSubmit} onError={errors => console.warn(\"Validation errors\", errors)}>\n                <DialogTitle id=\"alert-dialog-title\">\n                    {elementTitle} : {initialValue ? \"Edit\" : \"Add\"}\n                </DialogTitle>\n                <DialogContent>\n                    <TextValidator\n                        className={classes.textFieldEdit}\n                        label={field}\n                        fullWidth\n                        autoFocus\n                        onChange={onChange}\n                        name=\"editDialogField1\"\n                        value={name}\n                        validators={[\"required\", \"elementName\", DESIGN_PROPERTY_RULE.rule]}\n                        errorMessages={[\n                            `${field} is required`,\n                            `Element with name '${name}' already exists`,\n                            DESIGN_PROPERTY_RULE.error,\n                        ]}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button color=\"primary\" type=\"submit\">\n                        OK\n                    </Button>\n                </DialogActions>\n            </ValidatorForm>\n        </Dialog>\n    );\n};\n","import React, { Fragment } from \"react\";\nimport { observer, useLocalStore } from \"mobx-react\";\n\nimport { List } from \"@material-ui/core\";\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\n\nimport { useStores } from \"../../hooks/use-stores\";\nimport Item from \"../Item\";\nimport { DropdownDesignProperty, ToggleDesignProperty, DesignPropertyType } from \"store/objects/design-property\";\nimport { EditSimpleDialog } from \"../EditElementDialog\";\nimport { EditPropertyDialog } from \"../EditPropertyDialog\";\n\ninterface Property {\n    name: string;\n    position: number;\n    properties: (DropdownDesignProperty | ToggleDesignProperty)[];\n}\n\nconst PropertyList = observer(() => {\n    const { propertiesStore } = useStores();\n    const localStore = useLocalStore(() => ({\n        isDragging: false,\n        editDialog: false,\n        newPropDialog: false,\n        initialValue: \"\",\n        selectedProp: \"\",\n        toggleIsDragging(state: boolean) {\n            localStore.isDragging = state;\n        },\n        toggleEdit(state: boolean) {\n            localStore.editDialog = state;\n        },\n        toggleAdd(state: boolean, selectedProp: string) {\n            localStore.selectedProp = selectedProp;\n            localStore.newPropDialog = state;\n        },\n        initDialog(name: string) {\n            localStore.initialValue = name;\n            localStore.editDialog = true;\n        },\n        get propertyList() {\n            return propertiesStore.propertyList;\n        },\n    }));\n\n    // We do this to make sure it is properly rerendered when it changes\n    const { propertyList } = localStore;\n\n    const onDragEnd = (result: DropResult) => {\n        localStore.toggleIsDragging(false);\n        const { source: src, destination: dest, type } = result;\n        if (\n            !dest ||\n            typeof dest.index === \"undefined\" ||\n            (src.index === dest.index && src.droppableId === dest.droppableId)\n        ) {\n            return;\n        }\n\n        if (type === \"ITEM\") {\n            propertiesStore.changeLocations(src.index, dest.index);\n        } else if (type === \"INNERLIST\") {\n            if (src.droppableId === dest.droppableId) {\n                propertiesStore.swapPropsInCollection(src.droppableId, src.index, dest.index);\n            } else {\n                propertiesStore.swapPropsBetweenCollections(src.droppableId, src.index, dest.droppableId, dest.index);\n            }\n        }\n    };\n\n    const onEdit = (elementName: string) => {\n        localStore.initDialog(elementName);\n    };\n\n    const editItem = (name: string) => {\n        if (name && localStore.initialValue && name !== localStore.initialValue) {\n            propertiesStore.changeProp(localStore.initialValue, name);\n        }\n        localStore.toggleEdit(false);\n    };\n\n    const createProperty = (name: string, description: string, type: DesignPropertyType) => {\n        if ((localStore.selectedProp, name && description && type)) {\n            if (type === \"Dropdown\") {\n                propertiesStore.addPropertyToCollection(\n                    localStore.selectedProp,\n                    new DropdownDesignProperty({\n                        name,\n                        description,\n                        options: [],\n                    }),\n                );\n            } else if (type === \"Toggle\") {\n                propertiesStore.addPropertyToCollection(\n                    localStore.selectedProp,\n                    new ToggleDesignProperty({\n                        name,\n                        description,\n                        className: \"\",\n                    }),\n                );\n            }\n        }\n        localStore.toggleAdd(false, \"\");\n    };\n\n    return (\n        <Fragment>\n            <DragDropContext onDragEnd={onDragEnd} onBeforeDragStart={() => localStore.toggleIsDragging(true)}>\n                <Droppable droppableId=\"list\" type=\"ITEM\">\n                    {provided => (\n                        <List component=\"nav\" ref={provided.innerRef} {...provided.droppableProps}>\n                            {propertyList.map((prop, index) => (\n                                <Item\n                                    key={prop.name}\n                                    edit={onEdit}\n                                    add={() => localStore.toggleAdd(true, prop.name)}\n                                    index={index}\n                                    {...prop}\n                                    isDragging={localStore.isDragging}\n                                />\n                            ))}\n                            {provided.placeholder}\n                        </List>\n                    )}\n                </Droppable>\n            </DragDropContext>\n            <EditSimpleDialog\n                open={localStore.editDialog}\n                initialValue={localStore.initialValue}\n                onClose={() => localStore.toggleEdit(false)}\n                onProceed={editItem}\n                fieldName=\"Element name\"\n                elementTitle=\"Design Property Element\"\n            />\n            <EditPropertyDialog\n                open={localStore.newPropDialog}\n                element={localStore.selectedProp}\n                onClose={() => localStore.toggleAdd(false, \"\")}\n                onProceed={createProperty}\n            />\n        </Fragment>\n    );\n});\n\nexport default PropertyList;\n","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        toolBar: {\n            paddingLeft: theme.spacing(2),\n        },\n        toolBarIcon: {\n            color: theme.palette.common.white,\n        },\n        formControlTopBar: {\n            margin: theme.spacing(1),\n            // minWidth: 120,\n        },\n        formControlTopBarInput: {\n            color: theme.palette.common.white,\n            marginTop: 0,\n            textAlign: \"right\",\n        },\n        title: {\n            flexGrow: 1,\n        },\n        appBar: {},\n    }),\n);\n","import React, { Fragment, useMemo, useState, ChangeEvent, FC } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    IconButton,\n    Tooltip,\n    Snackbar,\n    FormControl,\n    Select,\n    MenuItem,\n    Link,\n    SvgIcon,\n} from \"@material-ui/core\";\n\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport CloudDownloadOutlinedIcon from \"@material-ui/icons/CloudDownloadOutlined\";\nimport HelpOutlineOutlinedIcon from \"@material-ui/icons/HelpOutlineOutlined\";\nimport HomeOutlinedIcon from \"@material-ui/icons/HomeOutlined\";\n\nimport { saveAs } from \"file-saver\";\nimport copy from \"copy-to-clipboard\";\n\nimport { useStyles } from \"./style\";\nimport { useStores } from \"../../hooks/use-stores\";\nimport { PropertiesType } from \"store/properties-store\";\n\nconst downloadSupported = (): boolean => {\n    try {\n        const isSupported = !!new Blob();\n        return isSupported;\n    } catch (error) {\n        console.warn(\"File download not supported\", error);\n        return false;\n    }\n};\n\nconst TopBar: FC<{ onHomeClick: () => void }> = observer(({ onHomeClick }) => {\n    const { propertiesStore } = useStores();\n    const classes = useStyles();\n\n    const isDownloadSupported = useMemo(() => downloadSupported(), []);\n    const [copyPopper, setCopyPopper] = useState(false);\n\n    const onCopyClick = () => {\n        const jsonString = JSON.stringify(propertiesStore.JSOBject, null, 4);\n\n        copy(jsonString, {\n            debug: true,\n            format: \"text/plain\",\n            onCopy: () => {\n                setCopyPopper(true);\n            },\n        });\n    };\n\n    const onDownloadClick = () => {\n        const jsonString = JSON.stringify(propertiesStore.JSOBject, null, 4);\n        const blob = new Blob([jsonString], { type: \"application/json;charset=utf-8\" });\n        saveAs(blob, propertiesStore.type === \"Native\" ? \"settings-native.json\" : \"settings.json\");\n    };\n\n    const handleChange = (event: ChangeEvent<{ name?: string | undefined; value: unknown }>) => {\n        const val = event.target.value as PropertiesType;\n        propertiesStore.setType(val);\n    };\n\n    return (\n        <Fragment>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar variant=\"dense\" className={classes.toolBar}>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Mendix Design Properties Editor\n                    </Typography>\n                    <FormControl className={classes.formControlTopBar}>\n                        {propertiesStore.type !== null ? (\n                            <Select\n                                classes={{\n                                    root: classes.formControlTopBarInput,\n                                    disabled: classes.formControlTopBarInput,\n                                }}\n                                id=\"type-selection\"\n                                value={propertiesStore.type}\n                                onChange={handleChange}\n                                disabled\n                            >\n                                <MenuItem value={\"Web\"}>Web</MenuItem>\n                                <MenuItem value={\"Native\"}>Native</MenuItem>\n                            </Select>\n                        ) : null}\n                    </FormControl>\n                    <Tooltip title=\"Home\">\n                        <IconButton aria-label=\"Download JSON\" onClick={onHomeClick}>\n                            <HomeOutlinedIcon fontSize=\"small\" className={classes.toolBarIcon} />\n                        </IconButton>\n                    </Tooltip>\n                    {isDownloadSupported ? (\n                        <Tooltip title=\"Download JSON\">\n                            <IconButton aria-label=\"Download JSON\" onClick={onDownloadClick}>\n                                <CloudDownloadOutlinedIcon fontSize=\"small\" className={classes.toolBarIcon} />\n                            </IconButton>\n                        </Tooltip>\n                    ) : null}\n                    <Tooltip title=\"Copy to Clipboard\">\n                        <IconButton aria-label=\"Copy to Clipboard\" onClick={onCopyClick}>\n                            <FileCopyOutlinedIcon fontSize=\"small\" className={classes.toolBarIcon} />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Info\">\n                        <Link href=\"https://docs.mendix.com/apidocs-mxsdk/apidocs/design-properties\" target=\"_blank\">\n                            <IconButton aria-label=\"Info\">\n                                <HelpOutlineOutlinedIcon fontSize=\"small\" className={classes.toolBarIcon} />\n                            </IconButton>\n                        </Link>\n                    </Tooltip>\n                    <Tooltip title=\"Info\">\n                        <Link href=\"https://github.com/JelteMX/mendix-dpt\" target=\"_blank\">\n                            <IconButton aria-label=\"Info\">\n                                <SvgIcon viewBox=\"0 0 30.47 29.72\" style={{ width: \"20px\" }}>\n                                    <path\n                                        d={\n                                            \"M15.23,0a15.24,15.24,0,0,0-4.81,29.69c.76.14,1-.33,1-.73s0-1.32,0-2.59c-4.24.92-5.13-2.05-5.13-2.05a4.07,4.07,0,0,0-1.7-2.23c-1.38-.94.11-.92.11-.92a3.19,3.19,0,0,1,2.33,1.57A3.25,3.25,0,0,0,11.49,24a3.28,3.28,0,0,1,1-2c-3.38-.39-6.94-1.69-6.94-7.53a5.93,5.93,0,0,1,1.57-4.09,5.51,5.51,0,0,1,.15-4s1.28-.41,4.19,1.56a14.52,14.52,0,0,1,7.63,0c2.91-2,4.18-1.56,4.18-1.56a5.48,5.48,0,0,1,.16,4A5.92,5.92,0,0,1,25,14.44C25,20.29,21.39,21.58,18,22a3.66,3.66,0,0,1,1,2.82c0,2,0,3.68,0,4.18s.28.88,1,.73A15.24,15.24,0,0,0,15.23,0Z\"\n                                        }\n                                        fill=\"#FFF\"\n                                        //style=\"fill:#191717;fill-rule:evenodd\"\n                                    />\n                                </SvgIcon>\n                            </IconButton>\n                        </Link>\n                    </Tooltip>\n                </Toolbar>\n            </AppBar>\n            <Snackbar\n                anchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\n                open={copyPopper}\n                onClose={() => {\n                    setCopyPopper(false);\n                }}\n                message=\"JSON copied to clipboard\"\n            />\n        </Fragment>\n    );\n});\n\nexport default TopBar;\n","import { makeStyles, createStyles, Theme, fade } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        introDialogRoot: {\n            padding: theme.spacing(1),\n        },\n        introBackdrop: {\n            backgroundColor: \"rgba(0,0,0,0.85)\",\n        },\n        introDialogPaper: {\n            //height: \"100%\",\n            minHeight: theme.spacing(38),\n        },\n        introGrid: {\n            marginBottom: theme.spacing(1.5),\n        },\n        introButton: {\n            width: \"100%\",\n            padding: theme.spacing(2),\n            \"& .MuiButton-label\": {\n                justifyContent: \"left\",\n            },\n        },\n        introUploadButton: {\n            backgroundColor: theme.palette.info.main,\n            \"&:hover\": {\n                backgroundColor: fade(theme.palette.info.dark, 0.5),\n            },\n        },\n        uploadRoot: {},\n        uploadInput: {\n            display: \"none\",\n        },\n    }),\n);\n\nexport default useStyles;\n","import React, { FC, useCallback } from \"react\";\n\nimport { Dialog, DialogContent, Grid, Button, DialogTitle } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\n\nimport MobileScreenShareOutlinedIcon from \"@material-ui/icons/MobileScreenShareOutlined\";\nimport WebAssetOutlinedIcon from \"@material-ui/icons/WebAssetOutlined\";\nimport CloudUploadOutlinedIcon from \"@material-ui/icons/CloudUploadOutlined\";\nimport PlayCircleFilledWhiteOutlinedIcon from \"@material-ui/icons/PlayCircleFilledWhiteOutlined\";\n\nimport { useStores } from \"../../hooks/use-stores\";\n\nimport SettingsWebAtlas from \"../../examples/settings.json\";\nimport SettingsNativeAtlas from \"../../examples/settings-native.json\";\nimport SettingsWebEmpty from \"../../examples/settings-empty.json\";\nimport SettingsNativeEmpty from \"../../examples/settings-native-empty.json\";\nimport { useStyles } from \"./style\";\n\nexport interface ConfirmDialogProps {\n    open: boolean;\n    onClose: () => void;\n}\n\nconst OpeningDialog: FC<ConfirmDialogProps> = observer(({ open, onClose }) => {\n    const classes = useStyles();\n    const { propertiesStore } = useStores();\n\n    const isEmpty = !propertiesStore.hasLocalStorage || propertiesStore.isEmpty;\n\n    const onLoadAtlasWeb = useCallback(() => {\n        propertiesStore.populateFromJSON(JSON.stringify(SettingsWebAtlas));\n        onClose();\n    }, []);\n\n    const onLoadAtlasNative = useCallback(() => {\n        propertiesStore.populateFromJSON(JSON.stringify(SettingsNativeAtlas));\n        onClose();\n    }, []);\n\n    const onLoadEmptyWeb = useCallback(() => {\n        propertiesStore.populateFromJSON(JSON.stringify(SettingsWebEmpty));\n        onClose();\n    }, []);\n\n    const onLoadEmptyNative = useCallback(() => {\n        propertiesStore.populateFromJSON(JSON.stringify(SettingsNativeEmpty));\n        onClose();\n    }, []);\n\n    const onFileChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!event.target.files) {\n            return;\n        }\n        const file = event.target.files[0];\n        const reader = new FileReader();\n        reader.onload = evt => {\n            const res = evt.target?.result;\n            if (res) {\n                try {\n                    propertiesStore.populateFromJSON(res.toString());\n                    onClose();\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        };\n        reader.readAsText(file);\n    }, []);\n\n    return (\n        <Dialog\n            open={open}\n            maxWidth=\"lg\"\n            onClose={onClose}\n            disableBackdropClick\n            disableEscapeKeyDown\n            BackdropProps={{\n                className: classes.introBackdrop,\n            }}\n            classes={{\n                root: classes.introDialogRoot,\n                paper: classes.introDialogPaper,\n            }}\n            // aria-describedby=\"alert-dialog-description\"\n            aria-labelledby=\"alert-dialog-title\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">Welcome</DialogTitle>\n            <DialogContent>\n                <Grid container spacing={3} className={classes.introGrid}>\n                    <Grid item xs={6}>\n                        <Button\n                            className={classes.introButton}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={onLoadAtlasNative}\n                            startIcon={<MobileScreenShareOutlinedIcon />}\n                        >\n                            Load Atlas UI - Native Mobile file (settings-native.json)\n                        </Button>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Button\n                            className={classes.introButton}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={onLoadAtlasWeb}\n                            startIcon={<WebAssetOutlinedIcon />}\n                        >\n                            Load Atlas UI - Web file (settings.json)\n                        </Button>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Button\n                            className={classes.introButton}\n                            color=\"primary\"\n                            variant=\"contained\"\n                            onClick={onLoadEmptyNative}\n                            startIcon={<MobileScreenShareOutlinedIcon />}\n                        >\n                            Start empty Native Mobile file (settings-native.json)\n                        </Button>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Button\n                            className={classes.introButton}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={onLoadEmptyWeb}\n                            startIcon={<WebAssetOutlinedIcon />}\n                        >\n                            Start empty Web file (settings.json)\n                        </Button>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <div className={classes.uploadRoot}>\n                            <input\n                                accept=\".json\"\n                                className={classes.uploadInput}\n                                id=\"contained-button-file\"\n                                onChange={onFileChange}\n                                type=\"file\"\n                            />\n                            <label htmlFor=\"contained-button-file\">\n                                <Button\n                                    variant=\"contained\"\n                                    component=\"span\"\n                                    startIcon={<CloudUploadOutlinedIcon />}\n                                    className={classes.introButton}\n                                >\n                                    Load local file\n                                </Button>\n                            </label>\n                        </div>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Button\n                            className={classes.introButton}\n                            variant=\"contained\"\n                            disabled={isEmpty}\n                            onClick={onClose}\n                            startIcon={<PlayCircleFilledWhiteOutlinedIcon />}\n                        >\n                            Continue from local storage {!isEmpty ? null : \"[empty]\"}\n                        </Button>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    );\n});\n\nexport default OpeningDialog;\n","import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        optionsTable: {\n            maxWidth: \"100%\",\n            minHeight: theme.spacing(44),\n            \"& > .MuiPaper-root\": {\n                \"& > .MuiToolbar-root\": {\n                    minHeight: theme.spacing(1),\n                    position: \"relative\",\n                    \"& .MuiButtonBase-root.MuiIconButton-root\": {\n                        position: \"absolute\",\n                        right: 0,\n                        zIndex: 100,\n                        top: 0,\n                    },\n                },\n                \"& .MuiButtonBase-root\": {\n                    padding: theme.spacing(1),\n                },\n                \"& .MuiIconButton-root\": {\n                    padding: theme.spacing(1),\n                },\n            },\n        },\n    }),\n);\n\nexport default useStyles;\n","import React, { FC } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { useStyles } from \"./style\";\nimport { useStores } from \"../../hooks/use-stores\";\nimport MaterialTable, { Column } from \"material-table\";\nimport { tableIcons } from \"components/DropdownProps/_dropdownTable\";\n\ninterface ClassListObject {\n    el: string;\n    prop: string;\n    class: string;\n}\n\nexport interface ClassTableState {\n    columns: Array<Column<ClassListObject>>;\n    data: ClassListObject[];\n}\n\nconst getTableState = (data: ClassListObject[]): ClassTableState => {\n    return {\n        columns: [\n            {\n                title: \"Class\",\n                field: \"class\",\n                cellStyle: {\n                    padding: 8,\n                },\n            },\n            {\n                title: \"Property\",\n                field: \"prop\",\n                cellStyle: {\n                    padding: 8,\n                },\n            },\n            {\n                title: \"Element\",\n                field: \"el\",\n                cellStyle: {\n                    padding: 8,\n                },\n            },\n        ],\n        data,\n    };\n};\n\nconst ClassesBox: FC<{}> = observer(() => {\n    const { propertiesStore } = useStores();\n    const tableState = getTableState(propertiesStore.classList);\n    const classes = useStyles();\n\n    return (\n        <div className={classes.optionsTable}>\n            <MaterialTable\n                icons={tableIcons}\n                title=\"\"\n                columns={tableState.columns}\n                data={tableState.data}\n                options={{\n                    pageSize: 5,\n                    pageSizeOptions: [5],\n                    headerStyle: {\n                        padding: 0,\n                    },\n                    rowStyle: {\n                        padding: 0,\n                    },\n                }}\n            />\n        </div>\n    );\n});\n\nexport default ClassesBox;\n","import React, { useMemo, useState } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport \"./styling/App.scss\";\n\nimport { StylesProvider, ThemeProvider } from \"@material-ui/styles\";\nimport { CssBaseline, Grid, Fab, Box } from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport JSONPretty from \"react-json-pretty\";\nimport \"react-json-pretty/themes/adventure_time.css\";\n\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\n\nimport { useStyles } from \"./styling/App\";\nimport { useStores } from \"./hooks/use-stores\";\nimport PropertyList from \"components/PropertyList\";\nimport TopBar from \"components/TopBar\";\nimport { EditSimpleDialog } from \"components/EditElementDialog\";\nimport OpeningDialog from \"components/OpeningDialog\";\nimport ClassesBox from \"./components/ClassesBox/index\";\n\nconst App = observer(() => {\n    const { appStore, propertiesStore } = useStores();\n    const theme = useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    type: appStore.darkMode ? \"dark\" : \"light\",\n                    primary: {\n                        main: \"#000\",\n                    },\n                },\n            }),\n        [appStore.darkMode],\n    );\n\n    const classes = useStyles(theme);\n    const [addDialogOpen, setAddDialogOpen] = useState(false);\n    const [openingDialog, switchOpeningDialog] = useState(true);\n\n    const onAddProp = (value: string) => {\n        if (value) {\n            propertiesStore.addProp(value);\n        }\n        setAddDialogOpen(false);\n    };\n\n    return (\n        <StylesProvider injectFirst>\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <div className={classes.root}>\n                    <TopBar onHomeClick={() => switchOpeningDialog(true)} />\n                    <Grid container spacing={2} className={classes.mainColumn}>\n                        <Grid item xs className={classes.leftColumn}>\n                            <PropertyList />\n                            <Fab\n                                color=\"primary\"\n                                aria-label=\"Add\"\n                                className={classes.addButton}\n                                size=\"small\"\n                                onClick={() => setAddDialogOpen(true)}\n                            >\n                                <AddCircleOutlinedIcon />\n                            </Fab>\n                        </Grid>\n                        <Grid item xs className={classes.rightColumn}>\n                            <Box display=\"flex\" flexDirection=\"column\" style={{ maxHeight: \"100%\" }}>\n                                <Box p={1} flexGrow={0} className={classes.jsonBox}>\n                                    <JSONPretty data={propertiesStore.JSOBject} />\n                                </Box>\n                                <Box p={1} className={classes.classesBox}>\n                                    <ClassesBox />\n                                </Box>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                </div>\n                <EditSimpleDialog\n                    open={addDialogOpen}\n                    onClose={() => setAddDialogOpen(false)}\n                    onProceed={onAddProp}\n                    fieldName=\"Element name\"\n                    elementTitle=\"Design Property Element\"\n                />\n                <OpeningDialog open={openingDialog} onClose={() => switchOpeningDialog(false)} />\n            </ThemeProvider>\n        </StylesProvider>\n    );\n});\n\nexport default App;\n","/* istanbul ignore file */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* istanbul ignore file */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"mobx-react-lite/batchingForReactDom\";\n\nimport \"fontsource-roboto\";\nimport \"./styling/index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}